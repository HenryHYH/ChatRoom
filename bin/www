#!/usr/bin/env node
var debug = require('debug')('ChatRoom'),
    app = require('../app'),
    server = require('http').Server(app),
    io = require('socket.io')(server);

app.set('port', process.env.PORT || 18080);

// web
server.listen(app.get('port'), function () {
    console.log('Express server Listening on port ' + server.address().port);
});

// chat
var users = []; // 储存所有用户信息

io.on('connection', function (socket) {
    var user = null;

    socket.on('start chat', function (info) {
        user = {
            UId: socket.id,
            Nickname: info.Nickname,
            Room: info.Room
        }
        users.push(user);

        socket.join(info.Room);

        socket.emit('user info', user);
        socket.emit('user list', users.filter(function (item) {
            return item.Room == info.Room;
        }));
        socket.broadcast.to(info.Room).emit('new user', user);
        socket.broadcast.to(info.Room).emit('system message', user.Nickname + ' is on-line (' + getTime() + ')');
    });

    socket.on('message', function (message) {
        if (user) {
            var info = {
                User: user,
                Message: message,
                Time: getTime()
            };
            io.in(user.Room).emit('message', info);
        }
    });

    socket.on('disconnect', function () {
        if (user) {
            users = users.remove(function (item) {
                return item.UId == socket.id;
            });

            var room = user.Room;
            socket.leave(room);

            socket.broadcast.to(room).emit('system message', user.Nickname + ' is off-line (' + getTime() + ')');
            socket.broadcast.to(room).emit('user list', users.filter(function (item) {
                return item.Room == room;
            }));
        }
    });

    var getTime = function () {
        var date = new Date();
        return date.getFullYear() + '/' + (date.getMonth() + 1) + '/' + date.getDate() + ' ' + date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds();
    };
});

// 根据条件移除指定的元素
Array.prototype.remove = function (cond) {
    var len = this.length;

    for (var i = len - 1; i >= 0; i--) {
        if (cond(this[i])) {
            users.splice(i, 1);
        }
    }

    return this;
};
